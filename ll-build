#!/bin/sh

# ll-build - The Laptop Lab build script
#
# Copyright (C) 2012  Anthony Green <green@redhat.com>
# Distrubuted under the terms of the GPL v3 or later.

# ==== Configure this section ======================================

# Either modify the definition of these variables within this file, or
# set them in a file called ~/.ll-config, which this script will read.
if test -f ~/.ll-config; then
  source ~/.ll-config
fi

# The domain name for my private network.
export LL_DOMAIN=${LL_DOMAIN-example.org}

# The kerberos domain.  Just an uppercase domain name by default.
typeset -u LL_IPA_REALM 
export LL_IPA_REALM=${LL_IPA_REAM-$LL_DOMAIN}

# My timezone
export LL_TIMEZONE=${LL_TIMEZONE-America/Toronto}

# Where is the RHEL DVD ISO?
export LL_RHELDVD=${LL_RHELDVD}

# What root password do you plan on using?
export LL_ROOTPW=${LL_ROOTPW}

# Where's a safe place for temporary mounts on this host?
export LL_MOUNTPOINT=${LL_MOUNTPOINT}

# Your RHN login name
export LL_RHNLOGIN=${LL_RHNLOGIN}

# Activation key for SAM server.  Point your browser here:
# https://rhn.redhat.com/network/account/activation_keys/list.pxt and
# create a new Activation Key with the Red Hat Default base channel,
# and the "SAM for RHEL Server (v.6 64-bit x86_64)" child channel.
export LL_SAM_KEY=${LL_SAM_KEY}

# Path to the manifest file for the subscription asset manage,
# currently assumed to be called manifest.zip.  The SAM kickstart file
# should be modified if this is not the case.  FIXME.
export LL_SAM_MANIFEST=${LL_SAM_MANIFEST}

# More SAM configury...
export LL_SAM_ADMIN=${LL_SAM_ADMIN-admin}
export LL_SAM_ADMINPWD=${LL_SAM_ADMINPWD-$LL_ROOTPW}
export LL_SAM_ORGNAME=${LL_SAM_ORGNAME-Laptop_Lab}

# Passwords for IPA.  Just use the root password by default.
export LL_IPA_ADMINPWD=${LL_IPA_ADMINPWD-$LL_ROOTPW}
export LL_IPA_DMPWD=${LL_IPA_DMPWD-$LL_ROOTPW}
export LL_IPA_SUDOPWD=${LL_IPA_SUDOPWD-$LL_ROOTPW}

export LL_IPA_USER_LOGIN=${LL_IPA_USER_LOGIN}
export LL_IPA_USER_FIRST=${LL_IPA_USER_FIRST}
export LL_IPA_USER_LAST=${LL_IPA_USER_LAST}
export LL_IPA_USER_PUBKEY=${LL_IPA_USER_PUBKEY}

# === Basic Sanity Checks ==============================================

for v in LL_DOMAIN LL_IPA_REALM LL_TIMEZONE LL_RHELDVD LL_ROOTPW LL_MOUNTPOINT LL_RHNLOGIN LL_SAM_KEY LL_SAM_MANIFEST LL_SAM_ADMIN LL_SAM_ADMINPWD LL_SAM_ORGNAME LL_IPA_ADMINPWD LL_IPA_DMPWD LL_IPA_SUDOPWD LL_IPA_USER_LOGIN LL_IPA_USER_FIRST LL_IPA_USER_LAST LL_IPA_USER_PUBKEY; do
  if [ "`printenv $v`x" = x ]; then
    echo "Error: missing value for $v in ~/.ll-config";
  fi;
done;

# TODO - verify $LL_RHELDVD
# TODO - verify $LL_MOUNTPOINT 

# === Utility Functions and Internal Variables =========================

# Generate random MAC addresses that start with 52:00:

function generate_MAC_address() {
  SOURCE=`dd if=/dev/urandom count=1 2>/dev/null | openssl dgst -md5`
  eval "$1='52:00:$(echo ${SOURCE} | sed 's/^............\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4/')'"
}

# Split domain like example.com into example and com.
DNAM=`echo $LL_DOMAIN | awk -F. '{ print $1 }'`
DTLD=`echo $LL_DOMAIN | awk -F. '{ print $2 }'`

# === Host system work =================================================

# Mount the RHEL DVD under /mnt, or similar.
sudo mount -o loop -t iso9660 $LL_RHELDVD $LL_MOUNTPOINT

if false; then

# === IPA ==============================================================

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

cat > ipa.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.99 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname ipa.$LL_DOMAIN \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
network --bootproto dhcp \
 --hostname ipa.$LL_DOMAIN \
 --noipv6 \
 --device=$ETH1_MAC
rootpw $LL_ROOTPW
# IPA needs a number of ports open.  See the documentation for details.
#firewall --enabled --ssh --port=80:tcp,443:tcp,389:tcp,636:tcp,88:tcp,88:udp,464:tcp,464:udp,53:tcp,53:udp,7389:tcp
firewall --disabled
#selinux --enforcing
selinux --permissive
timezone --utc $LL_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart
%packages
@core
ipa-client
subscription-manager
@identity-management-server
bind
bind-dyndb-ldap
emacs

%post --log=/root/post_install_1.log
# Force this host info the hosts file.
echo "10.0.0.99  ipa.$LL_DOMAIN" >> /etc/hosts

# Fix IPA.  See  https://bugzilla.redhat.com/show_bug.cgi?id=842374 
# and  http://www.redhat.com/archives/freeipa-devel/2012-March/msg00267.html
cat > /root/ipa-fix.patch <<IPAFIX
--- /usr/lib/python2.6/site-packages/ipaserver/install/dsinstance.py.orig	2012-05-26 22:12:20.000000000 -0400
+++ /usr/lib/python2.6/site-packages/ipaserver/install/dsinstance.py	2012-07-23 14:11:27.608844877 -0400
@@ -333,6 +333,8 @@
                 root_logger.critical("failed to add user %s" % e)
 
     def __create_instance(self):
+        pent = pwd.getpwnam(DS_USER)
+
         self.backup_state("serverid", self.serverid)
         self.fstore.backup_file("/etc/sysconfig/dirsrv")
 
@@ -347,6 +349,7 @@
 
         # Must be readable for dirsrv
         os.chmod(target_fname, 0440)
+        os.chown(target_fname, pent.pw_uid, pent.pw_gid)
 
         inf_txt = ipautil.template_str(INF_TEMPLATE, self.sub_dict)
         root_logger.debug("writing inf template")
IPAFIX
(cd /; patch -p0 < /root/ipa-fix.patch)

# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname ipa.$LL_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

echo === Configuring the IPA server =================================
ipa-server-install -a $LL_IPA_ADMINPWD --hostname=ipa.$LL_DOMAIN -r $LL_IPA_REALM -p $LL_IPA_DMPWD -n $LL_DOMAIN --no-ntp --setup-dns --no-forwarders --configure-ssh --configure-sshd --ssh-trust-dns -U

echo === Setting the password for the default IPA sudo bind user. ===
echo "$LL_IPA_ADMINPWD" | kinit admin
ldappasswd -Y GSSAPI -S -h ipa.$LL_DOMAIN uid=sudo,cn=sysaccounts,cn=etc,dc=$DNAM,dc=$DTLD -s $LL_IPA_SUDOPWD

echo === Create a user ==============================================
ipa user-add $LL_IPA_USER_LOGIN \
             --first=$LL_IPA_USER_FIRST \
             --last=$LL_IPA_USER_LAST \
             --random \
             --sshpubkey="$LL_IPA_USER_PUBKEY"

echo === Enable home directory creation =============================
authconfig --enablemkhomedir --update

%end
EOF

virt-install \
    --disk $LL_RHELDVD,device=cdrom \
    --name ipa.$LL_DOMAIN --ram 1024 \
    --disk /var/lib/libvirt/images/ipa.$LL_DOMAIN.img,size=8 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $LL_MOUNTPOINT \
    -x "ks=file:/ipa.ks" \
    --initrd-inject=ipa.ks \
    --noreboot --force

# Restart the guest and move on.
virsh --connect qemu:///system start ipa.$LL_DOMAIN

# === Subscription Asset Manager =======================================
#
# Let's set up the SAM server first.  This is the server through which
# other servers will register to RHN and acts as a gateway to the RHN
# content delivery network.  We need this, for instance, to get
# cobbler from the satellite server channel.
#

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

cat > sam.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.97 \
 --netmask=255.255.255.0 --nameserver=10.0.0.99 \
 --hostname sam.$LL_DOMAIN \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
network --bootproto dhcp \
 --hostname sam.$LL_DOMAIN \
 --noipv6 \
 --device=$ETH1_MAC
rootpw $LL_ROOTPW
firewall --enabled --ssh --port=80:tcp,443:tcp,8088:tcp
selinux --enforcing
timezone --utc $LL_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart
%packages
@core
ipa-client
subscription-manager
# Install packages required by SAM.  Doing this here pulls them from
# the DVD ISO rather than over the net from RHN.
antlr
apr-util
cvs
ecj
gdb
gettext
gstreamer
gstreamer-plugins-base
ghostscript
ghostscript-fonts
httpd
httpd-tools
iso-codes
jakarta-commons-collections
jakarta-commons-daemon
jakarta-commons-dbcp
jakarta-commons-discovery
jakarta-commons-httpclient
jakarta-commons-logging
jakarta-commons-pool
java-1.5.0-gcj
java-1.6.0-openjdk
jline
jna
jpackage-utils
libXfont
libXtst
libXv
libXxf86vm
libcgroup
libfontenc
libgomp
libmng
libogg
liboil
libselinux-python
libselinux-ruby
libsndfile
libtheora
libvorbis
mailcap
make
mesa-dri-drivers
mesa-libGL
mesa-libGLU
mod_ssl
mx4j
openjpeg-libs
patch
perl-CGI
perl-ExtUtils-MakeMaker
perl-ExtUtils-ParseXS
perl-Test-Harness
postgresql
postgresql-jdbc
postgresql-libs
postgresql-server
pulseaudio-libs
qt
qt-sqlite
qt4
redhat-lsb
setools-libs
setools-libs-python
sinjdoc
tomcat6
tomcat6-el-2.1-api
tomcat6-jsp-2.1-api
tomcat6-lib
tomcat6-servlet-2.5-api
tzdata-java
urw-fonts
xml-common
xml-commons-apis
xml-commons-resolver
xorg-x11-font-utils
%post --log=/root/post_install_1.log
# Even though we are using DHCP, /etc/resolv.conf is not configured at
# this point in the installation process.  Let's use google's public
# DNS servers.
echo "nameserver 8.8.8.8" > /etc/resolv.conf
echo "nameserver 8.8.4.4" >> /etc/resolv.conf

# Now we register the SAM server to hosted RHN classic...
rhnreg_ks --profilename=$LL_RHNLOGIN --activationkey=$LL_SAM_KEY

# Install and configure katello...
yum install -y katello-headpin-all

# Set up a post-reboot script
/bin/cat > /root/post-boot-configure.sh <<PBCEND
#!/bin/sh
katello-configure --deployment=sam \
  --user-name=$LL_SAM_ADMIN \
  --user-pass=$LL_SAM_ADMINPWD \
  --org-name=$LL_SAM_ORGNAME
headpin -u $LL_SAM_ADMIN -p $LL_SAM_ADMINPWD provider import_manifest --org $LL_SAM_ORGNAME --name "Red Hat" --file /root/manifest.zip
headpin -u $LL_SAM_ADMIN -p $LL_SAM_ADMINPWD environment create --org $LL_SAM_ORGNAME --name Lab --prior Library
PBCEND
chmod +x /root/post-boot-configure.sh
cp /etc/rc.d/rc.local /etc/rc.d/rc.local.backup
cat >> /etc/rc.d/rc.local <<PBCRCEND
. /etc/init.d/functions
action "Running Post Boot Configure script: " /bin/true
/root/post-boot-configure.sh > /root/post-boot-configure.log 2>&1
action "  Restoring original rc.local: " mv -f /etc/rc.d/rc.local.backup /etc/rc.d/rc.local
PBCRCEND

echo === Enabling home directory creation ===========================
authconfig --enablemkhomedir --update
%end

%post --nochroot --log=/mnt/sysimage/root/post_install_2.log
# Copy the SAM manifest file from our initrd image into /root
cp /manifest.zip /mnt/sysimage/root
%end
EOF

virt-install \
    --disk $LL_RHELDVD,device=cdrom \
    --name sam.$LL_DOMAIN --ram 1024 \
    --disk /var/lib/libvirt/images/sam.$LL_DOMAIN.img,size=8 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $LL_MOUNTPOINT \
    -x "ks=file:/sam.ks" \
    --initrd-inject=sam.ks \
    --initrd-inject=$LL_SAM_MANIFEST --noreboot --force

# Restart the guest to complete katello's configuration.  This just
# starts the guest, and we'll move on while it continues to run.
virsh --connect qemu:///system start sam.$LL_DOMAIN

# WARNING: There is a race here, in that we assume that the SAM
# katello instance will finish configuring itself BEFORE it is
# required for the IPA %post script below.  We can always sleep here
# for a minute or two before moving on to give SAM a head start if we
# have to.

fi

# === Cobbler ==========================================================

# Generate a couple of MAC addresses for eth0 and eth1.
generate_MAC_address ETH0_MAC
generate_MAC_address ETH1_MAC

cat > cobbler.ks <<EOF
install
text
reboot
lang en_US.UTF-8
keyboard us
network --bootproto static --ip=10.0.0.98 \
 --netmask=255.255.255.0 --nameserver=10.0.0.98 \
 --hostname cobbler.$LL_DOMAIN \
 --nodefroute \
 --noipv6 \
 --device=$ETH0_MAC
network --bootproto dhcp \
 --hostname cobbler.$LL_DOMAIN \
 --noipv6 \
 --device=$ETH1_MAC
rootpw $LL_ROOTPW
# Cobbler needs a number of ports open.  See the documentation for details.
firewall --enabled --ssh --port=69:tcp,80:tcp,25151:tcp
selinux --enforcing
timezone --utc $LL_TIMEZONE
bootloader --location=mbr --append="rd_NO_PLYMOUTH"
zerombr
clearpart --all --initlabel
autopart
%packages
@core
subscription-manager
@identity-management-server
bind
bind-dyndb-ldap

%post --log=/root/post_install_1.log
# Fix networking...
echo "nameserver 10.0.0.99" > /etc/resolv.conf
hostname cobbler.$LL_DOMAIN
echo "PEERDNS=no" >> /etc/sysconfig/network-scripts/ifcfg-eth1

# TODO remove this when IPA is working
echo "10.0.0.97  sam.$LL_DOMAIN" >> /etc/hosts
echo "10.0.0.98  cobbler.$LL_DOMAIN" >> /etc/hosts
echo "10.0.0.99  ipa.$LL_DOMAIN" >> /etc/hosts

echo === Register with IPA server ===================================
ipa-client-install -N --configure-ssh --configure-sshd --ssh-trust-dns --mkhomedir --enable-dns-updates -p admin -w $LL_IPA_ADMINPWD -U

echo === Grab cobbler from RHN ======================================
rhnks_reg --username=$LL_RHN_LOGIN --password=$LL_RHN_PASSWORD
rhn-channel -u $LL_RHN_LOGIN -p $LL_RHN_PASSWORD --add -c redhat-rhn-satellite-5.4-server-x86_64-6
yes | yum install cobbler
# TODO unregister from RHN

echo === Register with SAM server ===================================
cat /etc/resolv.conf
rpm -ivh http://sam.$LL_DOMAIN/pub/candlepin-cert-consumer-sam.$LL_DOMAIN-1.0-1.noarch.rpm
subscription-manager register --user $LL_SAM_ADMIN --password $LL_SAM_ADMINPWD --org $LL_SAM_ORGNAME --env Lab
chkconfig tftp on
service tftp start
chkconfig rsync on
service rsync start
/usr/sbin/semanage fcontext -a -t public_content_t "/tftpboot/.*" 
/usr/sbin/semanage fcontext -a -t public_content_t "/var/www/cobbler/images/.*"
#cobbler get-loaders

echo === Enabling home directory creation ===========================
authconfig --enablemkhomedir --update
%end
EOF

virt-install \
    --disk $LL_RHELDVD,device=cdrom \
    --name cobbler.$LL_DOMAIN --ram 1024 \
    --disk /var/lib/libvirt/images/cobbler.$LL_DOMAIN.img,size=8 \
    --network network:10_0,model=virtio,mac=$ETH0_MAC \
    --network network:default,model=virtio,mac=$ETH1_MAC \
    -l $LL_MOUNTPOINT \
    -x "ks=file:/cobbler.ks" \
    --initrd-inject=cobbler.ks \
    --noreboot --force

# Restart the guest and move on.
virsh --connect qemu:///system start cobbler.$LL_DOMAIN
